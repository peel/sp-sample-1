* Users API Assignment

** Considerations and corners cut
For excercise purposes I decided to choose Http4s as a familiar http server and DSL.
Http4s falls in nicely with monadic approach of Grafter 
(which I haven't worked with and still am on a fence with its design choices).
This allows to keep the matters isolated and highly scalable, contained and fairly simple.
Due to time restrictions some corners have been cut, mostly:
- authentication/authorization is not implemnted (hints on ~AuthMiddleware~ below)
- content negotiation as a better way of versioning and response structuring (hinted within ~Versioning~ section)
- http routes structure within a single ~Http~ module could be expanded into separate modules fetched via ~Reader~ monad
- effect type of ~cats.effect.IO~ should ba parameterised within ~Http~ module

** Versioning
Versioning has been a common issue with REST-like APIs. 
The simplier, yet less-favourable, approach taken in the current version of 
the application is to simply encode version within the endpoint.
This approach usually allows for enough flexibility for major changes 
at a cost of high code duplication.
A far better approach to take would be to use content negotiation
as purely RESTful and easier to maintain approach. 
In terms of Http4s, that would mean we can have two separate functions 
within a single endpoint, which leads to less duplication, more flexibity 
and easier testing. 
This approach is more involved and although I would consider following that 
route in production code, due to time-constraints I explicitly decided not 
to do that in scope of the task.

** Exception handling
One of the benefits of Http4s is the composable nature of http routes, which means
they are pretty much instances of ~Kleisli[F, Request[F], Response[F]]~.
This allows for simple composition within effect types (higher kind types).
Henceforth this will allow for expressing a discrete set of routes 
(that with more time could be fetched through separate hierarchy of ~Reader~ monads)
and share the error handling among them.

** Data sharing and admin/end-user endpoints
The endpoints are separated as if they are to be exposed through separate
pipelines using Http4s' ~AuthMiddleware~ which allows for access restrictions
for specific parts of the API.
Some of the endpoints that are otherwise duplicates of admin-like functionality, could be
exposed to end-users could be piped through lens so only part of the object is serialized. 
This could be easily doable ~Content-Type~ negotiation and vendor-specific content types. 
This would keep the codebase coincise and allow for code sharing whereas only
the needed components are pushed over the wire, for instance:

Admin interface version of the ~User~:
#+BEGIN_SRC json
#+END_SRC
Could easily become
#+BEGIN_SRC json
#+END_SRC
that removes the sensitive data from the response.
